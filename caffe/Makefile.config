## Refer to http://caffe.berkeleyvision.org/installation.html
# Contributions simplifying and improving our build system are welcome!

# CUDA directory contains bin/ and lib/ directories that we need.
#CUDA_DIR := /usr/local/cuda
#CUDA_DIR := /apps/CUDA/cuda-5.5
#CUDA_DIR := /apps/CUDA/cuda-6.0
CUDA_DIR := /usr/local/cuda

# CUDA architecture setting: going with all of them.
CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \
    -gencode arch=compute_20,code=sm_21 \
    -gencode arch=compute_30,code=sm_30 \
    -gencode arch=compute_35,code=sm_35 
    #-gencode arch=compute_50,code=sm_50 \
    #-gencode arch=compute_50,code=compute_50

##### OLD
# MKL directory contains include/ and lib/ directions that we need.
#MKL_DIR := /opt/intel/mkl
#MKL_DIR := /apps/INTEL/2013/composer_xe_2013_sp1.0.080/mkl

# BLAS choice:
# atlas for ATLAS (default)
# mkl for MKL
# open for OpenBlas
BLAS := atlas
# Custom (MKL/ATLAS/OpenBLAS) include and lib directories.
# Leave commented to accept the defaults for your choice of BLAS
# (which should work)!
# BLAS_INCLUDE := /apps/INTEL/2013/composer_xe_2013_sp1.0.080/mkl/include
# BLAS_LIB := /apps/INTEL/2013/composer_xe_2013_sp1.0.080/mkl/lib/intel64

# This is required only if you will compile the matlab interface.
# MATLAB directory should contain the mex binary in /bin.
# MATLAB_DIR := /usr/local
# MATLAB_DIR := /Applications/MATLAB_R2012b.app

# NOTE: this is required only if you will compile the python interface.
# We need to be able to find Python.h and numpy/arrayobject.h.
PYTHON_INCLUDES := /usr/include/python2.7 \
    $(HOME)/local/include/python2.7 \
    /usr/local/lib/python2.7/dist-packages/numpy/core/include
# Anaconda Python distribution is quite popular. Include path:
# PYTHON_INCLUDES := $(HOME)/anaconda/include \
    # $(HOME)/anaconda/include/python2.7 \
    # $(HOME)/anaconda/lib/python2.7/site-packages/numpy/core/include

# We need to be able to find libpythonX.X.so or .dylib.
PYTHON_LIB := /usr/local/lib
# PYTHON_LIB := $(HOME)/anaconda/lib

#CXX := /usr/bin/g++
# For OS X, use clang++.
# CXX := /usr/bin/clang++
# For OS X 10.9, use libstdc++ instead of libc++ for CUDA compatibility.
# CXXFLAGS := -stdlib=libstdc++

# Whatever else you find you need goes here.
INCLUDE_DIRS := $(PYTHON_INCLUDES) /usr/local/include      $(HOME)/local/include
LIBRARY_DIRS := $(PYTHON_LIB) /usr/lib /usr/local/lib      $(HOME)/local/lib    
#INCLUDE_DIRS := $(PYTHON_INCLUDES) /usr/local/include      $(HOME)/local6.0/include
#LIBRARY_DIRS := $(PYTHON_LIB) /usr/lib /usr/local/lib      $(HOME)/local6.0/lib

BUILD_DIR := build
DISTRIBUTE_DIR := distribute

# Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171
DEBUG := 1

# The ID of the GPU that 'make runtest' will use to run unit tests.
TEST_GPUID := 0



# Make slightly old HDF5 interfaces play nice...
# https://lists.gnu.org/archive/html/help-octave/2008-12/msg00273.html
#CPPFLAGS += "-DH5_USE_16_API"
